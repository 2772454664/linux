QPixmap HighLightEffect::drawSymbolicColoredPixmap(const QPixmap &source)
{
    QColor currentcolor=HighLightEffect::getCurrentSymbolicColor();
    QColor gray(128,128,128);
    QColor standard (31,32,34);
    QImage img = source.toImage();
    for (int x = 0; x < img.width(); x++) {
        for (int y = 0; y < img.height(); y++) {
            auto color = img.pixelColor(x, y);
            if (color.alpha() > 0) {
                if (qAbs(color.red()-gray.red())<20 && qAbs(color.green()-gray.green())<20 && qAbs(color.blue()-gray.blue())<20) {
                    color.setRed(255);
                    color.setGreen(255);
                    color.setBlue(255);
                    img.setPixelColor(x, y, color);
                }
                else if(qAbs(color.red()-standard.red())<20 && qAbs(color.green()-standard.green())<20 && qAbs(color.blue()-standard.blue())<20)
                {
                    color.setRed(255);
                    color.setGreen(255);
                    color.setBlue(255);
                    img.setPixelColor(x, y, color);
                }
                else
                {
                    img.setPixelColor(x, y, color);
                }
            }
        }
    }
    return QPixmap::fromImage(img);
}


我这里是把 接近（128，128，128）和（31，32，34） 两种色值的进行反白处理
用到这个函数的地方如下：
image=HighLightEffect::drawSymbolicColoredPixmap(QPixmap::fromImage(image)).toImage();
    painter.drawImage(iconRect, image);

rightPressMenu->addAction(QIcon(HighLightEffect::drawSymbolicColoredPixmap(QPixmap::fromImage(QIcon::fromTheme("system-lock-screen-symbolic").pixmap(24,24).toImage()))),
                              tr("Lock Screen"),
                              this, SLOT(ScreenServer())
                              );
